import asyncio

from datetime import date, datetime, timedelta

from pytz import timezone
from sqlalchemy.orm import Session

from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup

from telegram.config.consts import URL, USERNAME, APPLE_APP_PASSWORD, SECRET_SALT, API_TOKEN
from telegram.handlers.user_data_handler import UserDataStates, UserDataHandler
from telegram.services.cal_dav_service import CalDavService
from telegram.models.database import SessionLocal
from telegram.config.logging_config import get_logger
from telegram.services.user_service import UserService
from telegram.utils.callback_data import CallbackData
from telegram.utils.menu_builder import MenuBuilder
from telegram.config.availability_days_config import AvailabilityDaysConfig

logger = get_logger(__name__)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dispatcher = Dispatcher(storage=storage)
router = Router()

calDavService = CalDavService(URL, USERNAME, APPLE_APP_PASSWORD)
availability_days_config = AvailabilityDaysConfig()


class UserStates(StatesGroup):
    idle = State()
    selecting_date = State()
    selecting_time = State()


def get_database():
    database = SessionLocal()
    try:
        yield database
    finally:
        database.close()


@router.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext, database: Session = next(get_database())):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ.
    """
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
    await message.answer('–í–ê–ñ–ù–û! –ü–µ—Ä–µ–¥ —Ä–∞–±–æ—Ç–æ–π —Å –±–æ—Ç–æ–º –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /help. '
                         '–ü—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏')

    user_service = UserService(database, secret_salt=SECRET_SALT)
    user_data_handler = UserDataHandler(user_service, message.from_user.id)

    user_data_handler.ensure_user_exists()

    missing_state = user_data_handler.get_missing_data_state()

    if missing_state == UserDataStates.waiting_for_name:
        await state.set_state(missing_state)
        await message.answer("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")
    elif missing_state == UserDataStates.waiting_for_surname:
        await state.set_state(missing_state)
        await message.answer("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é.")
    elif missing_state == UserDataStates.waiting_for_language:
        await state.set_state(missing_state)
        await message.answer(
            "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=MenuBuilder.generate_language_keyboard()
        )
    else:
        await state.clear()
        await message.answer(
            "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
            reply_markup=MenuBuilder.generate_main_menu()
        )


@router.message(Command("help"))
async def help_command(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞.
    """
    help_text = (
        "‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π*\n\n"
        "üìå *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "  `/start` \\- –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "  `/help` \\- –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n\n"
        "üóì *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?*\n"
        "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ\\. –ù–ï–¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –æ—Ç–º–µ—á–∞—é—Ç—Å—è –∑–Ω–∞–∫–æ–º ‚ùå, –∏—Ö –≤—ã–±–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\\.\n"
        "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–Ω—è—Ç–∏—è\\. –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Å—ã –æ—Ç–º–µ—á–µ–Ω—ã \\- üü¢, –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ \\- üî¥\\.\n"
        "3Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å\\.\n\n"
        "‚è∞ *–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
        "  \\- –í—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–æ *–ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ \\(UTC\\+3\\)*\\.\n"
        "  \\- –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–µ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ *30 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥*\\.\n"
        "  \\- –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è, –±–æ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç –∏—Ö –ø–µ—Ä–µ–¥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º\\.\n\n"
        "üí° *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
        "  \\- –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É `/change_data`\\.\n"
        "  \\- –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å\\.\n"
        "  \\- –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å, –Ω–∞–∂–º–∏—Ç–µ *–ó–∞–∫–æ–Ω—á–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å*\\.\n\n"
        "üîß –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\\."
    )

    await message.answer(help_text, parse_mode="MarkdownV2")


@router.message(UserDataStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext, database: Session = next(get_database())):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    name = message.text.strip()

    if not name:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è:")
        return

    user_service = UserService(database, secret_salt=SECRET_SALT)
    user_data_handler = UserDataHandler(user_service, message.from_user.id)
    user_data_handler.update_user_data(name=name)

    await state.set_state(UserDataStates.waiting_for_surname)
    await message.answer("–ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")


@router.message(UserDataStates.waiting_for_surname)
async def process_surname(message: types.Message, state: FSMContext, database: Session = next(get_database())):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ñ–∞–º–∏–ª–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    surname = message.text.strip()

    if not surname:
        await message.answer("–§–∞–º–∏–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:")
        return

    user_service = UserService(database, secret_salt=SECRET_SALT)
    user_data_handler = UserDataHandler(user_service, message.from_user.id)
    user_data_handler.update_user_data(surname=surname)

    await state.set_state(UserDataStates.waiting_for_language)
    await message.answer(
        "–§–∞–º–∏–ª–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=MenuBuilder.generate_language_keyboard()
    )


@router.callback_query(UserDataStates.waiting_for_language)
async def process_language(callback_query: types.CallbackQuery, state: FSMContext,
                           database: Session = next(get_database())):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    language = callback_query.data.split("_")[1]

    user_service = UserService(database, secret_salt=SECRET_SALT)
    user_data_handler = UserDataHandler(user_service, callback_query.from_user.id)
    user_data_handler.update_user_data(language=language)

    await state.clear()
    await callback_query.message.edit_text("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                           reply_markup=MenuBuilder.generate_main_menu())


@router.callback_query(lambda c: c.data == CallbackData.BOOK_EVENT.value)
async def book_event(callback_query: types.CallbackQuery, state: FSMContext, database: Session = next(get_database())):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ" –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å.
    """
    user_service = UserService(database, secret_salt=SECRET_SALT)
    user_data_handler = UserDataHandler(user_service, callback_query.from_user.id)
    user_data_handler.ensure_user_exists()

    is_missing_state = user_data_handler.get_missing_data_state()

    if is_missing_state:
        await state.set_state(is_missing_state)
        await callback_query.message.edit_text("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ.")
        return

    today = date.today()
    keyboard = MenuBuilder.generate_calendar_keyboard(today.year, today.month)

    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith(CallbackData.DATE_PREFIX.value))
async def select_date(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è.
    """
    _, year, month, day = callback_query.data.split("_")
    selected_date = date(int(year), int(month), int(day))

    today = date.today()
    start_available_date = today + timedelta(days=1)
    end_available_date = start_available_date + timedelta(days=30)

    if not (start_available_date <= selected_date <= end_available_date) or availability_days_config.is_date_blocked(
            selected_date):
        keyboard = MenuBuilder.generate_calendar_keyboard(today.year, today.month)

        await callback_query.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ ({selected_date}) –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –¥–∞—Ç—É:",
            reply_markup=keyboard
        )

        return

    await state.update_data(selected_date=str(selected_date))

    busy_hours = calDavService.parse_calendar_events(
        calDavService.get_events_time_by_date(selected_date)
    )
    keyboard = MenuBuilder.generate_hours_keyboard(busy_hours)

    await callback_query.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {selected_date}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:")
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith(CallbackData.MONTH_PREFIX.value))
async def change_month(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –º–µ—Å—è—Ü–∞–º –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.
    """
    _, year, month = callback_query.data.split("_")
    year, month = int(year), int(month)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
    keyboard = MenuBuilder.generate_calendar_keyboard(year, month)

    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith(CallbackData.TIME_PREFIX.value))
async def select_time(callback_query: types.CallbackQuery, state: FSMContext, database: Session = next(get_database())):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏ –±—Ä–æ–Ω–∏—Ä—É–µ—Ç —Å–ª–æ—Ç.
    """
    hour = int(callback_query.data.split("_")[1])

    user_service = UserService(database, secret_salt=SECRET_SALT)
    user = user_service.get_user_by_telegram_id(callback_query.from_user.id)

    local_tz = timezone("Europe/Moscow")
    selected_date = datetime.strptime((await state.get_data())["selected_date"], "%Y-%m-%d").date()

    start_time_local = local_tz.localize(datetime.combine(selected_date, datetime.min.time().replace(hour=hour)))

    start_time = start_time_local.astimezone(timezone("UTC"))
    end_time = (start_time_local + timedelta(hours=1)).astimezone(timezone("UTC"))

    is_success = await calDavService.book_slot(
        summary=f"{user.name} {user.surname} ({user.language})",
        start=start_time,
        end=end_time
    )

    if is_success:
        busy_hours = calDavService.parse_calendar_events(
            calDavService.get_events_time_by_date(selected_date)
        )
        keyboard = MenuBuilder.generate_hours_keyboard(busy_hours)

        await callback_query.message.edit_text(
            f"–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {selected_date} –≤ {hour}:00.\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–æ—Ç –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.",
            reply_markup=keyboard
        )
    else:
        await callback_query.message.edit_text(
            f"–û—à–∏–±–∫–∞: –≤—Ä–µ–º—è {hour}:00 —É–∂–µ –∑–∞–Ω—è—Ç–æ –Ω–∞ {selected_date}.",
            reply_markup=callback_query.message.reply_markup
        )


@router.callback_query(lambda c: c.data == CallbackData.FINISH_BOOKING.value)
async def finish_booking(callback_query: types.CallbackQuery):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await callback_query.message.edit_text(
        "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    )

    await bot.send_message(
        callback_query.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=MenuBuilder.generate_main_menu()
    )


async def main():
    dispatcher.include_router(router)
    logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ')

    await bot.delete_webhook(drop_pending_updates=True)
    await dispatcher.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
