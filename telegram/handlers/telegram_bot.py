import asyncio
from asyncio import Lock
from collections import defaultdict

from datetime import date, datetime, timedelta
from functools import wraps

from pytz import timezone

from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup

from telegram.config.consts import URL, USERNAME, APPLE_APP_PASSWORD, API_TOKEN, ADMIN_TELEGRAM_ID
from telegram.handlers.user_data_handler import UserDataStates, UserDataHandler
from telegram.models.database import Database
from telegram.models.models import User
from telegram.services.cal_dav_service import CalDavService
from telegram.config.logging_config import get_logger
from telegram.services.user_service import UserService
from telegram.utils.callback_data import CallbackData
from telegram.utils.cryptographer import decrypt_telegram_id
from telegram.utils.menu_builder import MenuBuilder
from telegram.config.availability_days_config import AvailabilityDaysConfig

logger = get_logger(__name__)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dispatcher = Dispatcher(storage=storage)
router = Router()

user_task_locks = defaultdict(Lock)
user_tasks = defaultdict(set)

calDavService = CalDavService(URL, USERNAME, APPLE_APP_PASSWORD)
availability_days_config = AvailabilityDaysConfig()

database = Database()
asyncio.run(database.connect())

user_service = UserService(database)


class UserStates(StatesGroup):
    idle = State()
    selecting_date = State()
    selecting_time = State()


def task_handler(task_key_func=None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    task_key_func: –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∑–∞–¥–∞—á–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏).
    """

    def decorator(handler):
        @wraps(handler)
        async def wrapper(*args, **kwargs):
            event = args[0]
            user_id = (
                event.from_user.id
                if isinstance(event, types.CallbackQuery) or isinstance(event, types.Message)
                else None
            )

            task_key = task_key_func(event, *args, **kwargs) if task_key_func else f"{user_id}_{handler.__name__}"

            if task_key in user_tasks[user_id]:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É {task_key}. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
                return

            user_tasks[user_id].add(task_key)

            async with user_task_locks[user_id]:
                try:
                    return await handler(*args, **kwargs)
                finally:
                    user_tasks[user_id].remove(task_key)

        return wrapper

    return decorator


@router.message(Command("start"))
@task_handler(task_key_func=lambda event, *args, **kwargs: f"{event.from_user.id}_start")
async def start_command(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ.
    """
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
    await message.answer('–í–ê–ñ–ù–û! –ü–µ—Ä–µ–¥ —Ä–∞–±–æ—Ç–æ–π —Å –±–æ—Ç–æ–º –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /help. '
                         '–ü—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏')

    user_data_handler = UserDataHandler(user_service, message.from_user.id)

    await user_data_handler.ensure_user_exists()

    missing_state = await user_data_handler.get_missing_data_state()
    first_missing_state = missing_state[0]

    if first_missing_state == UserDataStates.WAITING_FOR_NAME:
        await state.set_state(first_missing_state)
        await message.answer("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")
    elif first_missing_state == UserDataStates.WAITING_FOR_SURNAME:
        await state.set_state(first_missing_state)
        await message.answer("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é.")
    elif first_missing_state == UserDataStates.WAITING_FOR_LANGUAGE:
        await state.set_state(first_missing_state)
        await message.answer(
            "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=MenuBuilder.generate_language_keyboard()
        )
    else:
        await state.clear()
        await message.answer(
            "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
            reply_markup=MenuBuilder.generate_main_menu()
        )


@router.message(Command("help"))
async def help_command(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞.
    """
    help_text = (
        "‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π*\n\n"
        "üìå *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "  `/start` \\- –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "  `/help` \\- –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
        "  `/change_data` –∏–ª–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ' \\- –ò–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ\n\n"
        "üóì *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?*\n"
        "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ\\. –ù–ï–¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –æ—Ç–º–µ—á–∞—é—Ç—Å—è –∑–Ω–∞–∫–æ–º ‚ùå, –∏—Ö –≤—ã–±–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\\.\n"
        "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–Ω—è—Ç–∏—è\\. –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Å—ã –æ—Ç–º–µ—á–µ–Ω—ã \\- üü¢, –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ \\- üî¥\\.\n"
        "3Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å\\.\n\n"
        "‚è∞ *–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
        "  \\- –í—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–æ *–ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ \\(UTC\\+3\\)*\\.\n"
        "  \\- –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–µ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ *30 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥*\\.\n"
        "  \\- –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è, –±–æ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç –∏—Ö –ø–µ—Ä–µ–¥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º\\.\n"
        "      –í–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à–∏ –†–ï–ê–õ–¨–ù–´–ï: –∏–º—è, —Ñ–∞–º–∏–ª–∏—è –∏ –Ø–ü\\.\n"
        "      –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –≤–∞—à–∏–º–∏ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, "
        "—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ —Å—á–∏—Ç–∞—Ç—å –∑–∞–ø–∏—Å—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π\\.\n"
        "  \\- –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ MVP, –µ—Å–ª–∏ –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –±–∞–≥–∏ –∏–ª–∏ –Ω–µ–¥–æ—á—ë—Ç—ã, —Å–æ–æ–±—â–∏—Ç–µ –æ –Ω–∏—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\\.\n"
        "  \\- –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –Ω–æ–≤–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É, —Ç–∞–∫–∂–µ –ø—Ä–æ—Å—å–±–∞ –Ω–∞–ø–∏—Å–∞—Ç—å —Å —ç—Ç–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\\.\n\n"
        "üí° *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
        "  \\- –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É `/change_data`\\.\n"
        "  \\- –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å\\.\n"
        "  \\- –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å, –Ω–∞–∂–º–∏—Ç–µ *–ó–∞–∫–æ–Ω—á–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å*\\.\n\n"
        "üîß –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\\."
    )

    await message.answer(help_text, parse_mode="MarkdownV2")


@router.message(Command(str(CallbackData.UPDATE_DATA.value)))
@router.callback_query(lambda c: c.data == "change_data")
async def change_data_command(event: types.Message | types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await state.update_data(new_name=None, new_surname=None, new_language=None)
    await state.set_state(UserDataStates.WAITING_FOR_NAME)

    if isinstance(event, types.Message):
        await event.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    elif isinstance(event, types.CallbackQuery):
        await event.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è:")


@router.message(UserDataStates.WAITING_FOR_NAME)
async def process_name(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    name = message.text.strip()

    if not name:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è:")
        return

    await state.update_data(new_name=name)
    await state.set_state(UserDataStates.WAITING_FOR_SURNAME)
    await message.answer("–ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")


@router.message(UserDataStates.WAITING_FOR_SURNAME)
async def process_surname(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ñ–∞–º–∏–ª–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    surname = message.text.strip()

    if not surname:
        await message.answer("–§–∞–º–∏–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:")
        return

    await state.update_data(new_surname=surname)
    await state.set_state(UserDataStates.WAITING_FOR_LANGUAGE)
    await message.answer(
        "–§–∞–º–∏–ª–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=MenuBuilder.generate_language_keyboard()
    )


@router.callback_query(UserDataStates.WAITING_FOR_LANGUAGE)
async def process_language(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    language = callback_query.data.split("_")[1]
    await state.update_data(new_language=language)

    user_data = await state.get_data()
    name, surname, language = user_data["new_name"], user_data["new_surname"], user_data["new_language"]

    confirm_keyboard = MenuBuilder.generate_confirmation_keyboard()

    await state.set_state(UserDataStates.CONFIRMING_CHANGES)
    await callback_query.message.edit_text(
        f"–í—ã –≤–≤–µ–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"üìù –ò–º—è: {name}\n"
        f"üìù –§–∞–º–∏–ª–∏—è: {surname}\n"
        f"üìù –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: {language}\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ?",
        reply_markup=confirm_keyboard
    )


@router.callback_query(lambda c: c.data == "confirm_changes", UserDataStates.CONFIRMING_CHANGES)
async def confirm_changes(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    user_data = await state.get_data()
    name, surname, language = user_data["new_name"], user_data["new_surname"], user_data["new_language"]

    await user_service.update_user(callback_query.from_user.id, name=name, surname=surname, language=language)

    await state.clear()
    await callback_query.message.edit_text("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                           reply_markup=MenuBuilder.generate_main_menu())


@router.callback_query(lambda c: c.data == "reject_changes", UserDataStates.CONFIRMING_CHANGES)
async def reject_changes(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç–∫–ª–æ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏.
    """
    await state.set_state(UserDataStates.WAITING_FOR_NAME)
    await callback_query.message.edit_text("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è:")


@router.callback_query(lambda c: c.data == CallbackData.BOOK_EVENT.value)
async def book_event(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ" –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å.
    """
    user_data_handler = UserDataHandler(user_service, callback_query.from_user.id)
    await user_data_handler.ensure_user_exists()

    missing_state, missing_fields, first_missing_label = await user_data_handler.get_missing_data_state()

    if missing_state:
        await state.set_state(missing_state)
        await callback_query.message.edit_text(
            f"‚ùå –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ.\n"
            f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ: {first_missing_label}."
        )
        return

    today = date.today()
    keyboard = MenuBuilder.generate_calendar_keyboard(today.year, today.month)

    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith(CallbackData.DATE_PREFIX.value))
async def select_date(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è.
    """
    _, year, month, day = callback_query.data.split("_")
    selected_date = date(int(year), int(month), int(day))

    today = date.today()
    start_available_date = today + timedelta(days=1)
    end_available_date = start_available_date + timedelta(days=30)

    if not (start_available_date <= selected_date <= end_available_date) or availability_days_config.is_date_blocked(
            selected_date):
        keyboard = MenuBuilder.generate_calendar_keyboard(today.year, today.month)

        await callback_query.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ ({selected_date}) –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –¥–∞—Ç—É:",
            reply_markup=keyboard
        )

        return

    await state.update_data(selected_date=str(selected_date))

    busy_hours = calDavService.parse_calendar_events(
        calDavService.get_events_time_by_date(selected_date)
    )
    keyboard = MenuBuilder.generate_hours_keyboard(busy_hours)

    await callback_query.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {selected_date}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:")
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith(CallbackData.MONTH_PREFIX.value))
async def change_month(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –º–µ—Å—è—Ü–∞–º –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.
    """
    _, year, month = callback_query.data.split("_")
    year, month = int(year), int(month)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
    keyboard = MenuBuilder.generate_calendar_keyboard(year, month)

    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith(CallbackData.TIME_PREFIX.value))
@task_handler(task_key_func=lambda event, *args, **kwargs: f"{event.from_user.id}_{event.data}")
async def select_time(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏ –±—Ä–æ–Ω–∏—Ä—É–µ—Ç —Å–ª–æ—Ç.
    """
    hour = int(callback_query.data.split("_")[1])
    user_id = callback_query.from_user.id

    user = await user_service.get_user_by_telegram_id(user_id)
    local_tz = timezone("Europe/Moscow")
    selected_date = datetime.strptime((await state.get_data())["selected_date"], "%Y-%m-%d").date()

    start_time_local = local_tz.localize(datetime.combine(selected_date, datetime.min.time().replace(hour=hour)))
    start_time = start_time_local.astimezone(timezone("UTC"))
    end_time = (start_time_local + timedelta(hours=1)).astimezone(timezone("UTC"))

    is_success = await calDavService.book_slot(
        summary=f"{user.name} {user.surname} ({user.language})",
        start=start_time,
        end=end_time
    )

    busy_hours = calDavService.parse_calendar_events(
        calDavService.get_events_time_by_date(selected_date)
    )
    keyboard = MenuBuilder.generate_hours_keyboard(busy_hours)

    if is_success:
        await callback_query.message.answer(
            f"‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {selected_date} –≤ {hour}:00.\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–æ—Ç –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ."
        )
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
            reply_markup=keyboard
        )
    else:
        await callback_query.message.edit_text(
            f"–û—à–∏–±–∫–∞: –≤—Ä–µ–º—è {hour}:00 —É–∂–µ –∑–∞–Ω—è—Ç–æ –Ω–∞ {selected_date}.",
            reply_markup=keyboard
        )


@router.callback_query(lambda c: c.data == CallbackData.FINISH_BOOKING.value)
async def finish_booking(callback_query: types.CallbackQuery):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await callback_query.message.edit_text(
        "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    )

    await bot.send_message(
        callback_query.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=MenuBuilder.generate_main_menu()
    )


@router.message(Command("send_admin_message"))
async def send_admin_message(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    """
    if message.from_user.id != ADMIN_TELEGRAM_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if len(message.text.split(maxsplit=1)) < 2:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: /send_admin_message –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!")
        return
    admin_message = message.text.split(maxsplit=1)[1]

    session = await database.get_session()

    try:
        active_users = session.query(User).all()

        if not active_users:
            await message.answer("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return

        for user in active_users:
            try:
                await bot.send_message(chat_id=decrypt_telegram_id(user.telegram_id),
                                       text=f"‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è{admin_message}‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è")
            except Exception as exception:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {exception}")

        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    finally:
        await database.close_session()


async def main():
    dispatcher.include_router(router)
    logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ')

    await bot.delete_webhook(drop_pending_updates=True)
    await dispatcher.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
