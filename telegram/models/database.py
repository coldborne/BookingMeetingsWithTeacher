import asyncio
import logging
import threading
import time

from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, SQLAlchemyError
from sqlalchemy.orm import Session, sessionmaker

from telegram.config.logging_config import get_logger

logger = get_logger(__name__)

DATABASE_URL = "mysql+pymysql://root:@localhost/telegram_bot"


class Database:
    __instance = None
    __threading_lock = threading.Lock()
    __MAX_WAITING_CONNECT_TIME = 600
    __WAITING_CONNECT_TIME = 30

    def __new__(cls):
        with cls.__threading_lock:
            if cls.__instance is None:
                cls.__instance = super(Database, cls).__new__(cls)
                cls.__instance.__init__()

            return cls.__instance

    def __init__(self):
        if not hasattr(self, "_initialized"):  # –ß—Ç–æ–±—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
            logging.basicConfig()
            logging.getLogger("sqlalchemy.engine").setLevel(logging.DEBUG)

            self.__engine = create_engine(DATABASE_URL, echo=True, pool_recycle=1800)
            self.__session_factory = sessionmaker(autocommit=False, autoflush=False, bind=self.__engine)
            self.__session = None
            self.__initialized = True  # –§–ª–∞–≥, —á—Ç–æ –æ–±—ä–µ–∫—Ç —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω

    async def connect(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        await self.__reconnect()

    async def __reconnect(self):
        """
        –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
        –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–µ—Ç—Å—è, –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ.
        –ï—Å–ª–∏ –∑–∞ 10 –º–∏–Ω—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
        """

        start_time = time.time()
        is_database_connect = False

        while is_database_connect == False:
            try:
                self.__session = self.__session_factory()
                await self.__execute('SELECT 1')
                logger.info('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
                is_database_connect = True
            except OperationalError as exception:
                elapsed_time = time.time() - start_time

                if elapsed_time > self.__MAX_WAITING_CONNECT_TIME:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ 10 –º–∏–Ω—É—Ç. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏.")
                    raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

                logger.warning(f"‚ö† –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {exception}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(self.__WAITING_CONNECT_TIME)

    async def __execute(self, query: str):
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ `run_in_executor`.
        """

        asyncio_loop = asyncio.get_running_loop()
        return await asyncio_loop.run_in_executor(None, self.__session.execute, text(query))

    async def get_session(self) -> Session:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é SQLAlchemy. –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞ ‚Äî —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é.
        """
        if self.__session is None or not self.__session.is_active:
            logger.info("‚ö† –°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é.")
            await self.__reconnect()

        return self.__session

    async def close_session(self):
        """
        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é.
        """
        if self.__session:
            self.__session.close()
            logger.info("üî¥ –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞.")

    async def rollback(self):
        """
        –û—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """
        if self.__session:
            logger.warning("‚è™ –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")
            self.__session.rollback()

    async def execute_with_retry(self, function, *args, **kwargs):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–≤—Ç–æ—Ä–æ–º –≤ —Å–ª—É—á–∞–µ –ø–æ—Ç–µ—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
        """
        try:
            return await function(*args, **kwargs)
        except OperationalError:
            logger.warning("‚ö† –ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...")
            await self.__reconnect()
            return await function(*args, **kwargs)
        except SQLAlchemyError as exception:
            await self.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {exception}")
            return None
